server:
  port: ${PORT:8080}

spring:
  application:
    name: Fei-Heroku-Spring-Test
  profiles:
    active: dev
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://x71wqc4m22j8e3ql.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/p4moo73z7rmvvoer}
    username: ${SPRING_DATASOURCE_USERNAME:cyfyazp2s556ox8w}
    password: ${SPRING_DATASOURCE_PASSWORD:en7ijotse26c0775}
    druid:
      initial-size: 5
      max-active: 20
      min-idle: 10
      max-wait: 6000
      pool-prepared-statements: false
      validation-query: select 1
      validation-query-timeout: 10
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 180000
      min-evictable-idle-time-millis: 600000
      max-evictable-idle-time-millis: 900000

  redis:
#    host: 39.100.78.62
#    host: redis://ec2-44-205-222-104.compute-1.amazonaws.com
#    port: 10640
#    password: p330b682b828e5234c8f003145a043b490c53485b82c18a8068c2a7512e1ae6d3
#    uri: redis://:p330b682b828e5234c8f003145a043b490c53485b82c18a8068c2a7512e1ae6d3@ec2-44-205-222-104.compute-1.amazonaws.com:10640
    database: 0
    timeout: 60000
    url: rediss://:p330b682b828e5234c8f003145a043b490c53485b82c18a8068c2a7512e1ae6d3@ec2-44-205-222-104.compute-1.amazonaws.com:10640

  kafka:
    bootstrap-servers: moped-01.srvs.cloudkafka.com:9094,moped-02.srvs.cloudkafka.com:9094,moped-03.srvs.cloudkafka.com:9094 #Kafka集群
    producer: #生产者配置
      retries: 0
      acks: 1    # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384 # 批量大小
      properties:
        linger:
          ms: 0   # 提交延时 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka   linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
      buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的序列化
      value-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的反序列化类
    consumer:
      properties:
        spring:
          json:
            trusted:
              packages: sample.kafka
        group:
          id: wj0jddu6-customers # 默认的消费组ID
        session:
          timeout:
            ms: 120000 # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
        request:
          timeout:
            ms: 180000 # 消费请求超时时间
      enable-auto-commit: true # 是否自动提交offset
      auto-offset-reset: latest # 当kafka中没有初始offset或offset超出范围时将自动重置offset 参数值earliest:重置为分区中最小的offset; latest:重置为分区中最新的offset(消费分区中新产生的数据); none:只要有一个分区不存在已提交的offset,就抛出异常;
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的序列化
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的反序列化类
      auto-commit-interval: 1000ms # 提交offset延时(接收到消息后多久提交offset)
    properties:
      security:
        protocol: SASL_SSL
      sasl:
        mechanism: SCRAM-SHA-256
        jaas:
          config: org.apache.kafka.common.security.scram.ScramLoginModule required username=wj0jddu6 password=r0TyhNWcpbRB_I20uEcw8nmLOWAnw19O;

  cloud:
    consul:
      #host: 39.100.78.62
      #aws docker consul:
      host: 34.208.154.214
      port: 8500
      discovery:
        preferIpAddress: true
        instance-id: ${spring.application.name}:${spring.cloud.client.ipAddress}:${spring.application.instance_id:${server.port}}:@project.version@
        healthCheckPath: /actuator/health

cloudkarafka:
  topic: wj0jddu6-default

mybatis:
  mapper-locations: classpath:mybatis/*.xml
  configuration:
    map-underscore-to-camel-case: true

logging:
  level:
    org:
      springframework: INFO
